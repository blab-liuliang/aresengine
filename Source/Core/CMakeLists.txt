# 库依赖
MESSAGE(STATUS "AresCore 3rdParty Dependences:")
FIND_PACKAGE(Boost 1.5.2 REQUIRED)
MESSAGE(STATUS "Boost Include Directory:" ${Boost_INCLUDE_DIRS})
MESSAGE(STATUS "Boost Library Directory:" ${Boost_LIBRARY_DIRS})

# 附加包含目录
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Include)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Include/Core/3rdParty/LZO)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Include/Core/3rdParty/RapidXml)

# 附加库目录
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

# 添加预处理器
IF(WIN32)
	ADD_DEFINITIONS(-DPLATFORM_WIN32)
ELSEIF(APPLE)
	IF(${CMAKE_OSX_SYSROOT} MATCHES "MacOSX.platform")
		ADD_DEFINITIONS(-DPLATFORM_MAC)
	ELSE()
		ADD_DEFINITIONS(-DPLATFORM_IOS)
	ENDIF()
ENDIF()

# 设置模块名称
SET(MODULE_NAME Core)

# 源文件路径
SET(MODULE_HEADER_PATH ${PROJECT_SOURCE_DIR}/Include/${MODULE_NAME})
SET(MODULE_SOURCE_PATH ${PROJECT_SOURCE_DIR}/Source/${MODULE_NAME})

# MSVC禁用特定警告(Visual Studio 8 and above)
IF(MSVC)
	SET(CMAKE_CXX_FLAGS_DEBUG			"${CMAKE_CXX_FLAGS_DEBUG} /wd4996 /MP")
    SET(CMAKE_CXX_FLAGS_RELEASE			"${CMAKE_CXX_FLAGS_RELEASE} /wd4996 /MP")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /wd4996")
    SET(CMAKE_C_FLAGS_DEBUG				"${CMAKE_C_FLAGS_DEBUG} /wd4996")
    SET(CMAKE_C_FLAGS_RELEASE			"${CMAKE_C_FLAGS_RELEASE} /wd4996")
    SET(CMAKE_C_FLAGS_RELWITHDEBINFO	"${CMAKE_C_FLAGS_RELWITHDEBINFO} /wd4996")

	# MT MTD
	STRING(REPLACE "/MD"  "/MT"  CMAKE_C_FLAGS_RELEASE          ${CMAKE_C_FLAGS_RELEASE})
    STRING(REPLACE "/MD"  "/MT"  CMAKE_C_FLAGS_RELWITHDEBINFO   ${CMAKE_C_FLAGS_RELWITHDEBINFO})
    STRING(REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG            ${CMAKE_C_FLAGS_DEBUG})
    STRING(REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG_INIT       ${CMAKE_C_FLAGS_DEBUG_INIT})
    STRING(REPLACE "/MD"  "/MT"  CMAKE_CXX_FLAGS_RELEASE        ${CMAKE_CXX_FLAGS_RELEASE})
    STRING(REPLACE "/MD"  "/MT"  CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
    STRING(REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG          ${CMAKE_CXX_FLAGS_DEBUG})
    STRING(REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG_INIT     ${CMAKE_CXX_FLAGS_DEBUG_INIT})
ENDIF(MSVC)

# 包含源文件
# LZO
IF(WIN32)
	SET(GROUP_LZO_SOURCE_FILES
		${MODULE_HEADER_PATH}/3rdParty/LZO/lzoconf.h
		${MODULE_HEADER_PATH}/3rdParty/LZO/lzodefs.h
		${MODULE_HEADER_PATH}/3rdParty/LZO/minilzo.h
		${MODULE_SOURCE_PATH}/3rdParty/LZO/minilzo.c
	)
	SOURCE_GROUP("3rdParty\\lzo" FILES ${GROUP_LZO_SOURCE_FILES})
	
	SET(GROUP_RAPIDXML_SOURCE_FILES
		${MODULE_HEADER_PATH}/3rdParty/RapidXml/rapidxml.hpp
		${MODULE_HEADER_PATH}/3rdParty/RapidXml/rapidxml_iterators.hpp
		${MODULE_HEADER_PATH}/3rdParty/RapidXml/rapidxml_print.hpp
		${MODULE_HEADER_PATH}/3rdParty/RapidXml/rapidxml_utils.hpp
	)
	SOURCE_GROUP("3rdParty\\RapidXML" FILES ${GROUP_RAPIDXML_SOURCE_FILES})
ELSE()
	SET(GROUP_LZO_SOURCE_FILES)
ENDIF()

# TinyXml
SET(GROUP_TINYXML_SOURCE_FILES
	${MODULE_HEADER_PATH}/3rdParty/TinyXml/tinyxml.h
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinystr.h
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinystr.cpp
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinyxml.h
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinyxml.cpp
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinyxmlerror.cpp
	${MODULE_SOURCE_PATH}/3rdParty/TinyXml/tinyxmlparser.cpp
)
SOURCE_GROUP("3rdParty\\TinyXml" FILES ${GROUP_TINYXML_SOURCE_FILES})

# DynLib
IF(WIN32)
	SET(GROUP_DYNLIB_SOURCE_FILES
		${MODULE_HEADER_PATH}/AresDynLib.h
		${MODULE_HEADER_PATH}/AresDynLibManager.h
		${MODULE_SOURCE_PATH}/AresDynLib.cpp
		${MODULE_SOURCE_PATH}/AresDynLibManager.cpp
	)
	SOURCE_GROUP("DynLib" FILES ${GROUP_DYNLIB_SOURCE_FILES})
ELSE()
	SET(GROUP_DYNLIB_SOURCE_FILES)
ENDIF()

# Graphics
SET(GROUP_GRAPHICS_SOURCE_FILES
	${MODULE_HEADER_PATH}/Graphics/AresElementFormat.h
	${MODULE_HEADER_PATH}/Graphics/AresFrameBuffer.h
	${MODULE_HEADER_PATH}/Graphics/AresGraphicsBuffer.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderAPITypedefs.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderDevice.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderDeviceCaps.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderLayout.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderMaterial.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderMethod.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderSettings.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderState.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderTypes.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderView.h
	${MODULE_HEADER_PATH}/Graphics/AresRenderWindow.h
	${MODULE_HEADER_PATH}/Graphics/AresTexture.h
	${MODULE_HEADER_PATH}/Graphics/AresViewPort.h
	${MODULE_SOURCE_PATH}/Graphics/AresFrameBuffer.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresGraphicsBuffer.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresRenderDevice.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresRenderLayout.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresRenderMaterial.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresRenderMethod.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresRenderView.cpp
	${MODULE_SOURCE_PATH}/Graphics/AresTexture.cpp
)
SOURCE_GROUP("Graphics" FILES ${GROUP_GRAPHICS_SOURCE_FILES})

#LogSystem
SET(GROUP_LOGSYSTEM_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresLogSystem.h
	${MODULE_SOURCE_PATH}/AresLogSystem.cpp
)
SOURCE_GROUP("LogSystem" FILES ${GROUP_LOGSYSTEM_SOURCE_FILES})

# Math
IF(WIN32)
SET(GROUP_MATH_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresMath.h
	${MODULE_HEADER_PATH}/AresMath.inl
	${MODULE_HEADER_PATH}/AresMathFpu.h
	${MODULE_HEADER_PATH}/AresMathSSE.h
	${MODULE_SOURCE_PATH}/AresMath.cpp
	${MODULE_SOURCE_PATH}/AresMathFpu.cpp
)
ELSE()
SET(GROUP_MATH_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresMath.h
	${MODULE_HEADER_PATH}/AresMath.inl
	${MODULE_HEADER_PATH}/AresMathFpu.h
	${MODULE_SOURCE_PATH}/AresMath.cpp
)
ENDIF()
SOURCE_GROUP("Math" FILES ${GROUP_MATH_SOURCE_FILES})

# MemFun
SET(GROUP_MEMFUN_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresKitFunction.h
	${MODULE_HEADER_PATH}/AresNumericTools.h	
)
SOURCE_GROUP("MemFun" FILES ${GROUP_MEMFUN_SOURCE_FILES})

# MultiThread
SET(GROUP_MAULTITHREAD_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresCriticalSection.h
	#${CORE_HEADER_PATH}/AresThread.h
	${MODULE_HEADER_PATH}/AresThreadLoopObject.h
	#${CORE_SOURCE_PATH}/AresThread.cpp
	${MODULE_SOURCE_PATH}/AresThreadLoopObject.cpp
)
SOURCE_GROUP("MultiThread" FILES ${GROUP_MAULTITHREAD_SOURCE_FILES})

# FileUtils
SET(GROUP_PACKING_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresFileUtils.h
	${MODULE_HEADER_PATH}/AresFileIO.hpp
	${MODULE_SOURCE_PATH}/AresFileUtils.cpp
)
IF(WIN32)
	SET(GROUP_FILEUTILS_PLATFORM_SOURCE_FILES
		${MODULE_SOURCE_PATH}/AresFileUtilsWin32.cpp	
	)
ELSEIF(APPLE)
	IF(${CMAKE_OSX_SYSROOT} MATCHES "MacOSX.platform")
		SET(GROUP_FILEUTILS_PLATFORM_SOURCE_FILES
		)
	ELSE()
		SET(GROUP_FILEUTILS_PLATFORM_SOURCE_FILES
			${MODULE_SOURCE_PATH}/AresFileUtilsIOS.mm
		)
	ENDIF()
ENDIF()

SOURCE_GROUP("FileUtils" FILES ${GROUP_PACKING_SOURCE_FILES})
SOURCE_GROUP("FileUtils" FILES ${GROUP_FILEUTILS_PLATFORM_SOURCE_FILES})

# Platform
IF(WIN32)
	SET(GROUP_PLATFORM_SOURCE_FILES
		${MODULE_HEADER_PATH}/AresPlatform.h
		${MODULE_HEADER_PATH}/AresVcWin32.h
	)
ELSEIF(APPLE)
	IF(${CMAKE_OSX_SYSROOT} MATCHES "MacOSX.platform")
		SET(GROUP_PLATFORM_SOURCE_FILES
			${MODULE_HEADER_PATH}/AresPlatform.h
			${MODULE_HEADER_PATH}/AresXcodeMac.h
		)
	ELSE()
		SET(GROUP_PLATFORM_SOURCE_FILES
			${MODULE_HEADER_PATH}/AresPlatform.h
			${MODULE_HEADER_PATH}/AresXcodeIOS.h
		)
	ENDIF()
ENDIF()

SOURCE_GROUP("Platform" FILES ${GROUP_PLATFORM_SOURCE_FILES})

# TriggerSystem
SET(GROUP_TRIGGERSYSTEM_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresTrigger.h
	${MODULE_HEADER_PATH}/AresTriggerSystem.h
	${MODULE_SOURCE_PATH}/AresTrigger.cpp
	${MODULE_SOURCE_PATH}/AresTriggerSystem.cpp
)
SOURCE_GROUP("TriggerSystem" FILES ${GROUP_TRIGGERSYSTEM_SOURCE_FILES})

# Utility
SET(GROUP_UTILITY_SOURCE_FILES
	${MODULE_HEADER_PATH}/AresException.h
	${MODULE_HEADER_PATH}/AresPtr.h
	${MODULE_HEADER_PATH}/AresSerialization.h
	${MODULE_HEADER_PATH}/AresSingleton.hpp
	${MODULE_HEADER_PATH}/AresTRect.hpp
)
SOURCE_GROUP("Utility" FILES ${GROUP_UTILITY_SOURCE_FILES})

# Main
SET(GROUP_SOURCE_FILES  ${MODULE_HEADER_PATH}/AresCore.h)
SOURCE_GROUP("" FILES ${GROUP_SOURCE_FILES})

# 系统判断
#IF(APPLE) IF(UNIX) IF(WIN32)

# 添加库
ADD_LIBRARY(AresCore 
	${GROUP_LZO_SOURCE_FILES}
	${GROUP_RAPIDXML_SOURCE_FILES}
	${GROUP_TINYXML_SOURCE_FILES}
	${GROUP_DYNLIB_SOURCE_FILES}
	${GROUP_GRAPHICS_SOURCE_FILES}
	${GROUP_LOGSYSTEM_SOURCE_FILES}
	${GROUP_MATH_SOURCE_FILES}
	${GROUP_MEMFUN_SOURCE_FILES}
	${GROUP_MAULTITHREAD_SOURCE_FILES}
	${GROUP_PACKING_SOURCE_FILES}
	${GROUP_FILEUTILS_PLATFORM_SOURCE_FILES}
	${GROUP_PLATFORM_SOURCE_FILES}
	${GROUP_TRIGGERSYSTEM_SOURCE_FILES}
	${GROUP_UTILITY_SOURCE_FILES}
	${GROUP_SOURCE_FILES}
)

# 设置属性
SET_TARGET_PROPERTIES(AresCore PROPERTIES FOLDER "Engine")